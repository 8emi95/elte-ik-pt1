
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.util.Set;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Gerike
 */
public class GamePanel extends javax.swing.JFrame {

    /**
     * Creates new form GamePanel
     */
    
    public ArrayList<String> getFileContent(File file){
        
        ArrayList<String> sorok = new ArrayList<>();
        try {
            Files.lines(file.toPath()).forEach( (sor) -> sorok.add(sor));
        } catch(Exception e){
            System.out.println(e);
        }
        return sorok;
    }
    

    
    public void feldolgoz(ArrayList<String> sorok){
        try {
            for (String sor : sorok){
                kepek.put(sor.substring(0, sor.lastIndexOf(" ")), ImageIO.read(new File(sor.substring(sor.lastIndexOf(" ") + 1))));
            }
        } catch(Exception e){
            System.out.println(e);
        }
        jList1.setListData(kepek.keySet().toArray(new String[kepek.keySet().size()]));
        System.out.println(kepek);
    }
    
    public void kivalaszt(){
        Random r = new Random();
        int szam = r.nextInt(kepek.size());
        for(String key : kepek.keySet()){
            if (szam == 0){
                currentImage = kepek.get(key);
                currentCountry = key;
            }   
            szam--;
        }
    }
    
    public GamePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        canvas1 = new java.awt.Canvas();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Tallózás");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sorsolj!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton3.setText("Tippelek!");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2)))
                .addGap(33, 33, 33)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(300, 300, 300))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Handle open button action.
        try {
            final JFileChooser fc = new JFileChooser(); 
            int returnVal = fc.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                feldolgoz(getFileContent(fc.getSelectedFile()));
            } else {
                System.out.println("Open command cancelled by user.");
            }
            System.out.println(returnVal);
        } catch(Exception e){}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       if(kepek.size() > 0){
        kivalaszt();
        jLabel2.setText("Talalatok szama: " + talalatSzam + " / " + osszesSzam);
        jLabel1.setIcon(new ImageIcon(currentImage.getScaledInstance(400, 400, java.awt.Image.SCALE_SMOOTH)));
        jButton3.setEnabled(false);
       }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String talalte;
        osszesSzam += 1;
        if (jList1.getSelectedValue().equals(currentCountry)){
            talalte = "Talált!";
            talalatSzam += 1;
        }
        else
            talalte = "Segg :/";
        jLabel2.setText(talalte);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        jButton3.setEnabled(true);
    }//GEN-LAST:event_jList1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamePanel().setVisible(true);
            }
        });
    }
    
    int talalatSzam = 0;
    int osszesSzam = 0;
    String currentCountry;
    BufferedImage currentImage;
    HashMap<String, BufferedImage> kepek = new HashMap<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}


/*
Készítsünk egy programot, mellyel a következő játékot lehet játszani.
Legyen egy tallózó gomb, amivel .flag kiterjesztésű fájlt nyithatunk meg. A fájlban soronként legyenek országnevek (akárhány szó lehet), ill. a sor utolsó szava legyen egy .png kiterjesztésű állomány, ami az ország zászlaja.
A fájlban legalább 3 sor legyen és mindegyik képfájl létezzen a projekt könyvtárában. Ezeket megnyitáskor ellenőrizzük.
Ha sikerült a megnyitás, töltődjön fel a jobb oldalon egy lista az országok neveivel, középen pedig egy üres rész. Az üres rész alatt jelenjen meg egy "Következő" gomb, aminek hatására a betöltött zászlók közül az egyik véletlenszerűen jelenjen meg a középső panelben. A "Következő" gomb felirata változzon meg "Tippelek"-re, és megnyomására a felhasználó a listában épp kijelölt országra tippelhet, miszerint annak az országnak a zászlaját látjuk most. A tippelés után egy címkén a gomb alatt jelenjen meg, hogy sikerült-e vagy sem és a "Tippelek" gomb felirata váltson vissza "Következő"-re.
A címke felirata a "Következő" megnyomására változzon meg: azt írja ki, eddig összesen hányból hány találata volt. A "Következő" megnyomására a lista kijelölése is törlődjön. A "Tippelek" gomb addig ne legyen aktív, amíg a listában nincs kijelölés. A listában csak egy elemet lehessen kijelölni. Bármikor lehessen új fájlt tallózni, ekkor a régi adatok törlődjenek.
*/